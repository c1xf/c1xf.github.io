<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xiao Feng on 陈晓峰的技术博客</title><link>https://sssylvan.github.io/</link><description>Recent content in Xiao Feng on 陈晓峰的技术博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><atom:link href="https://sssylvan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://sssylvan.github.io/others/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E5%88%A9%E5%BC%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/others/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E5%88%A9%E5%BC%8A/</guid><description>面向对象编程的利弊 1</description></item><item><title/><link>https://sssylvan.github.io/react/react-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/react/react-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/</guid><description>React 基础 React 核心理念是状态驱动视图 Fn(State) =&amp;gt; UI，这在 Class 组件年代的开发体验并不明显，直到颠覆性的创新 Hooks 出现。Hooks 带来了完全函数式的编程体验，让代</description></item><item><title/><link>https://sssylvan.github.io/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/readme/</guid><description>当日事当日毕 用书写沉淀知识，记录规律
学习策略 对知识进行分类，制定不同的学习方式方法，提升学习效率
知识分类 日常工作生活中，知识一般分为两类：工具类、经验类
工具类知识 工具类知识特点分析：
工具类知识直接影响效率 工具类知识比较容易上手，查阅文档即可 工具类知识随着工具的版本更新 工具类知识只对当前使用的工具有效，更换工具，知识可能就会失效 以写代码为例：一般的文本编辑器和 vscode 都能写代码。但掌握 vscode 开发效率会明显提升。可是如果哪天出现效率更高的 IDE 可以替换掉 vscode，你掌握的技巧（如：各种快捷键 F1, Ctrl+R）在新工具上可能就失灵了（ps：新 IDE 产品一般会考虑用户的迁移成本）
直接影响效率，工具类知识很重要，但因为时效性的限制，它的重要性具备一定的迷惑性，容易让人沉迷在工具的使用上
学习策略 用 github issue 记录这类知识，方便更新，一周进行一次整理，在仓库中备份。
针对常用的工具知识，进行有意识的训练形成肌肉记忆。例：快捷键、vim。
不常用的工具知识，记录好场景和解决方案。例：git、shell 命令。
英语归为此类。
经验类知识 世上本没有路，走的人多了就有了路。
人本没有经验，做得多了就有了经验。
一个问题的解决方式往往会有很多种，经验让人找到最合适的一个。
经验类知识再细分，可分为：
实战应用型。如 Angular 的实战项目经验 通用理论型。如 SOLID 五大设计原则 总结策略 实战应用型，以演示 demo 的形式记录，辅以代码注释。 通用理论的个人理解，以 blog 的文字记录。</description></item><item><title/><link>https://sssylvan.github.io/todos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/todos/</guid><description>待办事项 javascript null 和 undefined 那些事 date typescript 类型体操 vue 全局弹窗 点击事件节流 其他 axios token 刷新请求重发</description></item><item><title>Hooks</title><link>https://sssylvan.github.io/react/hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/react/hooks/</guid><description>这是一些文字 测试一下 github actions</description></item><item><title>HTTP 缓存实践总结</title><link>https://sssylvan.github.io/others/http-%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/others/http-%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</guid><description>HTTP 缓存实践总结 HTTP 缓存是优化网络性能的一种方式，可以减少资源加载时间并降低流量消耗。它也是新手大概率会踩的一个坑，因为我就是这么过来的 😂。分析</description></item><item><title>Hugo + Github Pages 搭建个人博客</title><link>https://sssylvan.github.io/others/hugo-+-github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/others/hugo-+-github-pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid><description>Hugo + Github Pages 搭建个人博客 Hugo 世界上最快的建站框架 现在工具很多，要搭建个人博客并非难事。也因为多，时间可能浪费在了选择上，本文主要记录搭建过程中我的</description></item><item><title>undefined 和 null 那些事</title><link>https://sssylvan.github.io/javascript/undefined-%E5%92%8C-null-%E9%82%A3%E4%BA%9B%E4%BA%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sssylvan.github.io/javascript/undefined-%E5%92%8C-null-%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid><description>🧑‍🤝‍🧑 undefined 和 null 那些事 在 Javascript 中，undefined 和 null 是若即若离的空值两兄弟 🧑‍🤝‍🧑（nullish value1）。我们有时候把它们视为两个</description></item></channel></rss>